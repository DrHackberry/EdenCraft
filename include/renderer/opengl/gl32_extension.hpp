#ifndef GL32_EXTENSION_HPP
#define GL32_EXTENSION_HPP

#include <GL/glcorearb.h>

void glVertexAttrib1f(GLuint index, GLfloat v0);
void glVertexAttrib1s(GLuint index,	GLshort v0);
void glVertexAttrib1d(GLuint index,	GLdouble v0);
void glVertexAttribI1i(GLuint index, GLint v0);
void glVertexAttribI1ui(GLuint index, GLuint v0);
void glVertexAttrib2f(GLuint index,	GLfloat v0,	GLfloat v1);
void glVertexAttrib2s(GLuint index,	GLshort v0,	GLshort v1);
void glVertexAttrib2d(GLuint index,	GLdouble v0, GLdouble v1);
void glVertexAttribI2i(GLuint index, GLint v0, GLint v1);
void glVertexAttribI2ui(GLuint index, GLuint v0, GLuint v1);
void glVertexAttrib3f(GLuint index, GLfloat v0,	GLfloat v1,	GLfloat v2);
void glVertexAttrib3s(GLuint index, GLshort v0,	GLshort v1,	GLshort v2);
void glVertexAttrib3d(GLuint index,	GLdouble v0, GLdouble v1, GLdouble v2);
void glVertexAttribI3i(GLuint index, GLint v0, GLint v1, GLint v2);
void glVertexAttribI3ui(GLuint index, GLuint v0, GLuint v1, GLuint v2);
void glVertexAttrib4f(GLuint index,	GLfloat v0,	GLfloat v1,	GLfloat v2,	GLfloat v3);
void glVertexAttrib4s(GLuint index, GLshort v0, GLshort v1,GLshort v2, GLshort v3);
void glVertexAttrib4d(GLuint index, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
void glVertexAttrib4Nub(GLuint index, GLubyte v0, GLubyte v1, GLubyte v2, GLubyte v3);
void glVertexAttribI4i(GLuint index, GLint v0, GLint v1, GLint v2, GLint v3);
void glVertexAttribI4ui(GLuint index, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
void glVertexAttrib1fv(GLuint index, const GLfloat *v);
void glVertexAttrib1sv(GLuint index, const GLshort *v);
void glVertexAttrib1dv(GLuint index, const GLdouble *v);
void glVertexAttribI1iv(GLuint index, const GLint *v);
void glVertexAttribI1uiv(GLuint index, const GLuint *v);
void glVertexAttrib2fv(GLuint index, const GLfloat *v);
void glVertexAttrib2sv(GLuint index, const GLshort *v);
void glVertexAttrib2dv(GLuint index, const GLdouble *v);
void glVertexAttribI2iv(GLuint index, const GLint *v);
void glVertexAttribI2uiv(GLuint index, const GLuint *v);
void glVertexAttrib3fv(GLuint index, const GLfloat *v);
void glVertexAttrib3sv(GLuint index, const GLshort *v);
void glVertexAttrib3dv(GLuint index, const GLdouble *v);
void glVertexAttribI3iv(GLuint index, const GLint *v);
void glVertexAttribI3uiv(GLuint index, const GLuint *v);
void glVertexAttrib4fv(GLuint index, const GLfloat *v);
void glVertexAttrib4sv(GLuint index, const GLshort *v);
void glVertexAttrib4dv(GLuint index, const GLdouble *v);
void glVertexAttrib4iv(GLuint index, const GLint *v);
void glVertexAttrib4bv(GLuint index, const GLbyte *v);
void glVertexAttrib4ubv(GLuint index, const GLubyte *v);
void glVertexAttrib4usv(GLuint index, const GLushort *v);
void glVertexAttrib4uiv(GLuint index, const GLuint *v);
void glVertexAttrib4Nbv(GLuint index, const GLbyte *v);
void glVertexAttrib4Nsv(GLuint index, const GLshort *v);
void glVertexAttrib4Niv(GLuint index, const GLint *v);
void glVertexAttrib4Nubv(GLuint index, const GLubyte *v);
void glVertexAttrib4Nusv(GLuint index, const GLushort *v);
void glVertexAttrib4Nuiv(GLuint index, const GLuint *v);
void glVertexAttribI4bv(GLuint index, const GLbyte *v);
void glVertexAttribI4ubv(GLuint index, const GLubyte *v);
void glVertexAttribI4sv(GLuint index, const GLshort *v);
void glVertexAttribI4usv(GLuint index, const GLushort * v);
void glVertexAttribI4iv(GLuint index, const GLint * v);
void glVertexAttribI4uiv(GLuint index, const GLuint * v);
void glVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
void glVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
void glVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
void glVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
void glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid * pointer);
void glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid * pointer);
void glEnableVertexAttribArray(GLuint index);
void glDisableVertexAttribArray(GLuint index);
void glEnable(GLenum cap);
void glDisable(GLenum cap);
void glEnablei(GLenum cap, GLuint index);
void glDisablei(GLenum cap, GLuint index);
void glPrimitiveRestartIndex(GLuint index);
void glDrawArrays(GLenum mode, GLint first, GLsizei count);
void glMultiDrawArrays(GLenum mode, const GLint * first, const GLsizei * count, GLsizei drawcount);
void glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid * indices);
void glMultiDrawElements(GLenum mode, const GLsizei * count, GLenum type, const GLvoid * const * indices, GLsizei drawcount);
void glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid * indices);
void glDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei primcount);
void glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount);
void glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, GLvoid * indices, GLint basevertex);
void glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, GLvoid * indices, GLint basevertex);
void glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, GLvoid * indices, GLsizei primcount, GLint basevertex);
void glMultiDrawElementsBaseVertex(GLenum mode, const GLsizei * count, GLenum type, const GLvoid * const * indices, GLsizei drawcount, const GLint * basevertex);
void glGenBuffers(GLsizei n, GLuint * buffers);
void glDeleteBuffers(GLsizei n, const GLuint * buffers);
void glDeleteBuffers(GLsizei n, const GLuint * buffers);
void glBindBuffer(GLenum target, GLuint buffer);
void glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
void glBindBufferBase(GLenum target, GLuint index, GLuint buffer);
void glBufferData(GLenum target, GLsizeiptr size, const GLvoid * data, GLenum usage);
void glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid * data);
void * glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
void * glMapBuffer(GLenum target, GLenum access);
void glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length);
GLboolean glUnmapBuffer(GLenum target);
void glCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
void glGenVertexArrays(GLsizei n, GLuint *arrays);
void glDeleteVertexArrays(GLsizei n, const GLuint *arrays);
void glBindVertexArray(GLuint array);
GLboolean glIsBuffer(GLuint buffer);
void glGetBufferParameteriv(GLenum target, GLenum value, GLint * data);
void glGetBufferParameteri64v(GLenum target, GLenum value, GLint64 * data);
void glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid * data);
void glGetBufferPointerv(GLenum target, GLenum pname, GLvoid ** params);
GLboolean glIsVertexArray(GLuint array);
void glDepthRange(GLdouble nearVal, GLdouble farVal);
void glViewport(GLint x, GLint y, GLsizei width, GLsizei height);
void glClampColor(GLenum target, GLenum clamp);
void glProvokingVertex(GLenum provokeMode);
void glBeginConditionalRender(GLuint id, GLenum mode);
void glEndConditionalRender();
void glBeginTransformFeedback(GLenum primitiveMode);
void glEndTransformFeedback();
void glBeginQuery(GLenum target, GLuint id);
void glEndQuery(GLenum target);
void glGenQueries(GLsizei n, GLuint * ids);
void glDeleteQueries(GLsizei n, const GLuint * ids);
GLboolean glIsQuery(GLuint id);
void glGetQueryiv(GLenum target, GLenum pname, GLint * params);
void glGetQueryObjectiv(GLuint id, GLenum pname, GLint * params);
void glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint * params);
void glGetQueryObjecti64v(GLuint id, GLenum pname, GLint64 * params);
void glGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 * params);
GLuint glCreateShader(GLenum shaderType);
void glShaderSource(GLuint shader, GLsizei count, const GLchar **string, const GLint *length);
void glCompileShader(GLuint shader);
void glDeleteShader(GLuint shader);
GLuint glCreateProgram();
void glAttachShader(GLuint program, GLuint shader);
void glDetachShader(GLuint program, GLuint shader);
void glLinkProgram(GLuint program);
void glUseProgram(GLuint program);
void glDeleteProgram(GLuint program);
void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
GLint glGetAttribLocation(GLuint program, const GLchar *name);
void glBindAttribLocation(GLuint program, GLuint index, const GLchar *name);
GLint glGetUniformLocation(GLuint program, const GLchar *name);
GLuint glGetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName);
void glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
void glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
void glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar **uniformNames, GLuint *uniformIndices);
void glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
void glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
void glUniform1f(GLint location, GLfloat v0);
void glUniform2f(GLint location, GLfloat v0, GLfloat v1);
void glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
void glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
void glUniform1i(GLint location, GLint v0);
void glUniform2i(GLint location, GLint v0, GLint v1);
void glUniform3i(GLint location, GLint v0, GLint v1, GLint v2);
void glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
void glUniform1ui(GLint location, GLuint v0);
void glUniform2ui(GLint location, GLuint v0, GLuint v1);
void glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2);
void glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
void glUniform1fv(GLint location, GLsizei count, const GLfloat *value);
void glUniform2fv(GLint location, GLsizei count, const GLfloat *value);
void glUniform3fv(GLint location, GLsizei count, const GLfloat *value);
void glUniform4fv(GLint location, GLsizei count, const GLfloat *value);
void glUniform1iv(GLint location, GLsizei count, const GLint *value);
void glUniform2iv(GLint location, GLsizei count, const GLint *value);
void glUniform3iv(GLint location, GLsizei count, const GLint *value);
void glUniform4iv(GLint location, GLsizei count, const GLint *value);
void glUniform1uiv(GLint location, GLsizei count, const GLuint *value);
void glUniform2uiv(GLint location, GLsizei count, const GLuint *value);
void glUniform3uiv(GLint location, GLsizei count, const GLuint *value);
void glUniform4uiv(GLint location, GLsizei count, const GLuint *value);
void glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
void glTransformFeedbackVaryings(GLuint program, GLsizei count, const char **varyings, GLenum bufferMode);
void glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, char *name);
void glValidateProgram(GLuint program);
void glGetProgramiv(GLuint program, GLenum pname, GLint *params);
void glBindFragDataLocation(GLuint program, GLuint colorNumber, const char * name);
GLint glGetFragDataLocation(GLuint program, const char * name);
GLboolean glIsShader(GLuint shader);
void glGetShaderiv(GLuint shader, GLenum pname, GLint *params);
void glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders);
void glGetShaderInfoLog(GLuint shader, GLsizei maxLength, GLsizei *length, GLchar *infoLog);
void glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
void glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params);
void glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params); 
void glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params); 
void glGetVertexAttribIiv(GLuint index, GLenum pname, GLint *params);
void glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params);
void glGetVertexAttribPointerv(GLuint index, GLenum pname, GLvoid ** pointer);
void glGetUniformfv(GLuint program, GLint location, GLfloat *params);
void glGetUniformiv(GLuint program, GLint location, GLint *params);
void glGetUniformuiv(GLuint program, GLint location, GLuint *params);
GLboolean glIsProgram(GLuint program);
void glGetProgramInfoLog(GLuint program, GLsizei maxLength, GLsizei *length, GLchar *infoLog);
void glGetMultisamplefv(GLenum pname, GLuint index, GLfloat *val);
void glPointSize(GLfloat size);
void glPointParameterf(GLenum pname, GLfloat param);
void glPointParameteri(GLenum pname, GLint param); 
void glPointParameterfv(GLenum pname, const GLfloat * params);
void glPointParameteriv(GLenum pname, const GLint * params);
void glLineWidth(GLfloat width);
void glFrontFace(GLenum mode);
void glCullFace(GLenum mode);
void glPolygonMode(GLenum face, GLenum mode);
void glPolygonOffset(GLfloat factor, GLfloat units);
void glPixelStoref(GLenum pname, GLfloat param);
void glPixelStorei(GLenum pname, GLint param);
void glActiveTexture(GLenum texture);
void glTexImage3D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid * data);
void glTexImage2D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid * data);
void glTexImage1D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid * data);
void glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
void glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
void glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid * pixels);
void glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * pixels);
void glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid * pixels);
void glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
void glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid * data);
void glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid * data);
void glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid * data);
void glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid * data);
void glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid * data);
void glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid * data);
void glTexImage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
void glTexImage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
void glTexBuffer(GLenum target, GLenum internalFormat, GLuint buffer);
void glTexParameterf(GLenum target, GLenum pname, GLfloat param);
void glTexParameteri(GLenum target, GLenum pname, GLint param);
void glTexParameterfv(GLenum target, GLenum pname, const GLfloat * params);
void glTexParameteriv(GLenum target, GLenum pname, const GLint * params);
void glTexParameterIiv(GLenum target, GLenum pname, const GLint * params);
void glTexParameterIuiv(GLenum target, GLenum pname, const GLuint * params);
void glGenerateMipmap(GLenum target);
void glBindTexture(GLenum target, GLuint texture);
void glDeleteTextures(GLsizei n, const GLuint * textures);
void glGenTextures(GLsizei n, GLuint * textures);
void glGetTexParameterfv(GLenum target, GLenum pname, GLfloat * params);
void glGetTexParameteriv(GLenum target, GLenum pname, GLint * params);
void glGetTexParameterIiv(GLenum target, GLenum pname, GLint * params);
void glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint * params);
void glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat * params);
void glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint * params);
void glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid * pixels);
void glGetCompressedTexImage(GLenum target, GLint level, GLvoid * pixels);
GLboolean glIsTexture(GLuint texture);
void glHint(GLenum target, GLenum mode);
void glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid * data);
void glReadBuffer(GLenum mode);
void glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
void glScissor(GLint x, GLint y, GLsizei width, GLsizei height);
void glSampleCoverage(GLfloat value, GLboolean invert);
void glSampleMaski(GLuint maskNumber, GLbitfield mask);
void glStencilFunc(GLenum func, GLint ref, GLuint mask);
void glStencilFuncSeparate(GLensum face, GLenum func, GLint ref, GLuint mask);
void glStencilOp(GLenum sfail, GLenum dpfail, GLenum dppass);
void glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
void glDepthFunc(GLenum func);
void glBlendEquation(GLenum mode);
void glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha);
void glBlendFuncSeparate(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
void glBlendFunc(GLenum sfactor, GLenum dfactor);
void glBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void glLogicOp(GLenum opcode);
void glDrawBuffer(GLenum buf);
void glDrawBuffers(GLsizei n, const GLenum *bufs);
void glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
void glColorMaski(GLuint buf, GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
void glDepthMask(GLboolean flag);
void glStencilMask(GLuint mask);
void glStencilMaskSeparate(GLenum face, GLuint mask);
void glClear(GLbitfield mask);
void glClearColor(GLfloat red, 	GLfloat green, GLfloat blue, GLfloat alpha);
void glClearDepth(GLdouble depth);
void glClearStencil(GLint s);
void glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint * value);
void glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint * value);
void glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat * value);
void glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
void glBindFramebuffer(GLenum target, GLuint framebuffer);
void glDeleteFramebuffers(GLsizei n, GLuint *framebuffers);
void glGenFramebuffers(GLsizei n, GLuint *ids);
void glBindRenderbuffer(GLenum target, GLuint renderbuffer);
void glDeleteRenderbuffers(GLsizei n, GLuint *renderbuffers);
void glGenRenderbuffers(GLsizei n, GLuint *renderbuffers);
void glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
void glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
void glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
void glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level);
void glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
void glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
void glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint layer);
void glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
GLenum glCheckFramebufferStatus(GLenum target);
GLboolean glIsFramebuffer(GLuint framebuffer);
void glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params);
GLboolean glIsRenderbuffer(GLuint renderbuffer);
void glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params);
void glFlush();
void glFinish();
GLsync glFenceSync(GLenum condition, GLbitfield flags);
void glDeleteSync(GLsync sync);
GLenum glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
void glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
void glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
GLboolean glIsSync(GLsync sync);
void glGetBooleanv(GLenum pname, GLboolean * data);
void glGetDoublev(GLenum pname, GLdouble * data);
void glGetFloatv(GLenum pname, GLfloat * data);
void glGetIntegerv(GLenum pname, GLint * data);
void glGetInteger64v(GLenum pname, GLint64 * data);
void glGetBooleani_v(GLenum target, GLuint index, GLboolean * data);
void glGetIntegeri_v(GLenum target, GLuint index, GLint * data);
void glGetInteger64i_v(GLenum target, GLuint index, GLint64 * data);
GLboolean glIsEnabled(GLenum cap);
GLboolean glIsEnabledi(GLenum cap, GLuint index);
const GLubyte *glGetString(GLenum name);
const GLubyte *glGetStringi(GLenum name, GLuint index);
void glQueryCounter(GLuint id, GLenum target);

#endif // GL32_EXTENSION_HPP